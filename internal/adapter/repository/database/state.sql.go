// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: state.sql

package database

import (
	"context"
)

const getStateByKey = `-- name: GetStateByKey :one
select key, value, created_at, updated_at from state where key = $1
`

func (q *Queries) GetStateByKey(ctx context.Context, key string) (State, error) {
	row := q.db.QueryRow(ctx, getStateByKey, key)
	var i State
	err := row.Scan(
		&i.Key,
		&i.Value,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const setState = `-- name: SetState :exec
INSERT INTO state (key, value) VALUES ($1, $2) ON CONFLICT (key) DO UPDATE SET value = $2, updated_at = current_timestamp
`

type SetStateParams struct {
	Key   string
	Value []byte
}

func (q *Queries) SetState(ctx context.Context, arg SetStateParams) error {
	_, err := q.db.Exec(ctx, setState, arg.Key, arg.Value)
	return err
}

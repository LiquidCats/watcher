// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: state.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createState = `-- name: CreateState :exec
INSERT INTO state (
    key, value, created_at, updated_at
) VALUES (
    $1, $2, $3, $4
 )
`

type CreateStateParams struct {
	Key       string
	Value     []byte
	CreatedAt pgtype.Timestamp
	UpdatedAt pgtype.Timestamp
}

func (q *Queries) CreateState(ctx context.Context, arg CreateStateParams) error {
	_, err := q.db.Exec(ctx, createState,
		arg.Key,
		arg.Value,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const getByKey = `-- name: GetByKey :one
select key, value, created_at, updated_at from state where key = $1
`

func (q *Queries) GetByKey(ctx context.Context, key string) (State, error) {
	row := q.db.QueryRow(ctx, getByKey, key)
	var i State
	err := row.Scan(
		&i.Key,
		&i.Value,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateState = `-- name: UpdateState :exec
UPDATE state SET value = $2, created_at = $3, updated_at = $4
WHERE key = $1
`

type UpdateStateParams struct {
	Key       string
	Value     []byte
	CreatedAt pgtype.Timestamp
	UpdatedAt pgtype.Timestamp
}

func (q *Queries) UpdateState(ctx context.Context, arg UpdateStateParams) error {
	_, err := q.db.Exec(ctx, updateState,
		arg.Key,
		arg.Value,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

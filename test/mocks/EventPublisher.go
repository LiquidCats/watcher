// Code generated by mockery v2.39.1. DO NOT EDIT.

package mocks

import (
	context "context"
	entity "watcher/internal/app/domain/entity"

	mock "github.com/stretchr/testify/mock"
)

// EventPublisher is an autogenerated mock type for the EventPublisher type
type EventPublisher struct {
	mock.Mock
}

// ConfirmBlock provides a mock function with given fields: ctx, blockchain, block
func (_m *EventPublisher) ConfirmBlock(ctx context.Context, blockchain entity.Blockchain, block *entity.Block) error {
	ret := _m.Called(ctx, blockchain, block)

	if len(ret) == 0 {
		panic("no return value specified for ConfirmBlock")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.Blockchain, *entity.Block) error); ok {
		r0 = rf(ctx, blockchain, block)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewBlock provides a mock function with given fields: ctx, blockchain, block
func (_m *EventPublisher) NewBlock(ctx context.Context, blockchain entity.Blockchain, block *entity.Block) error {
	ret := _m.Called(ctx, blockchain, block)

	if len(ret) == 0 {
		panic("no return value specified for NewBlock")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.Blockchain, *entity.Block) error); ok {
		r0 = rf(ctx, blockchain, block)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RejectBlock provides a mock function with given fields: ctx, blockchain, block
func (_m *EventPublisher) RejectBlock(ctx context.Context, blockchain entity.Blockchain, block *entity.Block) error {
	ret := _m.Called(ctx, blockchain, block)

	if len(ret) == 0 {
		panic("no return value specified for RejectBlock")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.Blockchain, *entity.Block) error); ok {
		r0 = rf(ctx, blockchain, block)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewEventPublisher creates a new instance of EventPublisher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEventPublisher(t interface {
	mock.TestingT
	Cleanup(func())
}) *EventPublisher {
	mock := &EventPublisher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

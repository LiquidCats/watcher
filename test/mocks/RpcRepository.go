// Code generated by mockery v2.39.1. DO NOT EDIT.

package mocks

import (
	context "context"
	entity "watcher/internal/app/domain/entity"

	mock "github.com/stretchr/testify/mock"
)

// RpcRepository is an autogenerated mock type for the RpcRepository type
type RpcRepository struct {
	mock.Mock
}

// GetBlockByHash provides a mock function with given fields: ctx, hash
func (_m *RpcRepository) GetBlockByHash(ctx context.Context, hash entity.BlockHash) (*entity.Block, error) {
	ret := _m.Called(ctx, hash)

	if len(ret) == 0 {
		panic("no return value specified for GetBlockByHash")
	}

	var r0 *entity.Block
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.BlockHash) (*entity.Block, error)); ok {
		return rf(ctx, hash)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.BlockHash) *entity.Block); ok {
		r0 = rf(ctx, hash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Block)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.BlockHash) error); ok {
		r1 = rf(ctx, hash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBlockByHeight provides a mock function with given fields: ctx, height
func (_m *RpcRepository) GetBlockByHeight(ctx context.Context, height entity.BlockHeight) (*entity.Block, error) {
	ret := _m.Called(ctx, height)

	if len(ret) == 0 {
		panic("no return value specified for GetBlockByHeight")
	}

	var r0 *entity.Block
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.BlockHeight) (*entity.Block, error)); ok {
		return rf(ctx, height)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.BlockHeight) *entity.Block); ok {
		r0 = rf(ctx, height)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Block)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.BlockHeight) error); ok {
		r1 = rf(ctx, height)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBlockTransactions provides a mock function with given fields: ctx, hash
func (_m *RpcRepository) GetBlockTransactions(ctx context.Context, hash entity.BlockHash) ([]entity.Transaction, error) {
	ret := _m.Called(ctx, hash)

	if len(ret) == 0 {
		panic("no return value specified for GetBlockTransactions")
	}

	var r0 []entity.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.BlockHash) ([]entity.Transaction, error)); ok {
		return rf(ctx, hash)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.BlockHash) []entity.Transaction); ok {
		r0 = rf(ctx, hash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.BlockHash) error); ok {
		r1 = rf(ctx, hash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLatestBlock provides a mock function with given fields: ctx
func (_m *RpcRepository) GetLatestBlock(ctx context.Context) (*entity.Block, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetLatestBlock")
	}

	var r0 *entity.Block
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*entity.Block, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *entity.Block); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Block)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRpcRepository creates a new instance of RpcRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRpcRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *RpcRepository {
	mock := &RpcRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

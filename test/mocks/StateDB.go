// Code generated by mockery v2.53.0. DO NOT EDIT.

package mocks

import (
	context "context"

	database "github.com/LiquidCats/watcher/v2/internal/adapter/repository/database"
	mock "github.com/stretchr/testify/mock"
)

// StateDB is an autogenerated mock type for the StateDB type
type StateDB struct {
	mock.Mock
}

// GetStateByKey provides a mock function with given fields: ctx, key
func (_m *StateDB) GetStateByKey(ctx context.Context, key string) (database.State, error) {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for GetStateByKey")
	}

	var r0 database.State
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (database.State, error)); ok {
		return rf(ctx, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) database.State); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Get(0).(database.State)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetState provides a mock function with given fields: ctx, arg
func (_m *StateDB) SetState(ctx context.Context, arg database.SetStateParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for SetState")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, database.SetStateParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewStateDB creates a new instance of StateDB. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStateDB(t interface {
	mock.TestingT
	Cleanup(func())
}) *StateDB {
	mock := &StateDB{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

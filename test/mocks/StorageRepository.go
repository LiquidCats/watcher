// Code generated by mockery v2.39.1. DO NOT EDIT.

package mocks

import (
	context "context"
	entity "watcher/internal/app/domain/entity"

	mock "github.com/stretchr/testify/mock"
)

// StorageRepository is an autogenerated mock type for the StorageRepository type
type StorageRepository struct {
	mock.Mock
}

// ConfirmBlock provides a mock function with given fields: ctx, blockchain, height
func (_m *StorageRepository) ConfirmBlock(ctx context.Context, blockchain entity.Blockchain, height entity.BlockHeight) error {
	ret := _m.Called(ctx, blockchain, height)

	if len(ret) == 0 {
		panic("no return value specified for ConfirmBlock")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.Blockchain, entity.BlockHeight) error); ok {
		r0 = rf(ctx, blockchain, height)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllUnconfirmedBlocks provides a mock function with given fields: ctx, blockchain, fromHeight
func (_m *StorageRepository) GetAllUnconfirmedBlocks(ctx context.Context, blockchain entity.Blockchain, fromHeight entity.BlockHeight) ([]*entity.Block, error) {
	ret := _m.Called(ctx, blockchain, fromHeight)

	if len(ret) == 0 {
		panic("no return value specified for GetAllUnconfirmedBlocks")
	}

	var r0 []*entity.Block
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.Blockchain, entity.BlockHeight) ([]*entity.Block, error)); ok {
		return rf(ctx, blockchain, fromHeight)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.Blockchain, entity.BlockHeight) []*entity.Block); ok {
		r0 = rf(ctx, blockchain, fromHeight)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Block)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.Blockchain, entity.BlockHeight) error); ok {
		r1 = rf(ctx, blockchain, fromHeight)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBlock provides a mock function with given fields: ctx, blockchain, height
func (_m *StorageRepository) GetBlock(ctx context.Context, blockchain entity.Blockchain, height entity.BlockHeight) (*entity.Block, error) {
	ret := _m.Called(ctx, blockchain, height)

	if len(ret) == 0 {
		panic("no return value specified for GetBlock")
	}

	var r0 *entity.Block
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.Blockchain, entity.BlockHeight) (*entity.Block, error)); ok {
		return rf(ctx, blockchain, height)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.Blockchain, entity.BlockHeight) *entity.Block); ok {
		r0 = rf(ctx, blockchain, height)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Block)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.Blockchain, entity.BlockHeight) error); ok {
		r1 = rf(ctx, blockchain, height)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetHeight provides a mock function with given fields: ctx, blockchain
func (_m *StorageRepository) GetHeight(ctx context.Context, blockchain entity.Blockchain) (entity.BlockHeight, error) {
	ret := _m.Called(ctx, blockchain)

	if len(ret) == 0 {
		panic("no return value specified for GetHeight")
	}

	var r0 entity.BlockHeight
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.Blockchain) (entity.BlockHeight, error)); ok {
		return rf(ctx, blockchain)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.Blockchain) entity.BlockHeight); ok {
		r0 = rf(ctx, blockchain)
	} else {
		r0 = ret.Get(0).(entity.BlockHeight)
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.Blockchain) error); ok {
		r1 = rf(ctx, blockchain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveConfirmedBlocks provides a mock function with given fields: ctx, blockchain, fromHeight
func (_m *StorageRepository) RemoveConfirmedBlocks(ctx context.Context, blockchain entity.Blockchain, fromHeight entity.BlockHeight) error {
	ret := _m.Called(ctx, blockchain, fromHeight)

	if len(ret) == 0 {
		panic("no return value specified for RemoveConfirmedBlocks")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.Blockchain, entity.BlockHeight) error); ok {
		r0 = rf(ctx, blockchain, fromHeight)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StoreBlock provides a mock function with given fields: ctx, blockchain, block
func (_m *StorageRepository) StoreBlock(ctx context.Context, blockchain entity.Blockchain, block *entity.Block) error {
	ret := _m.Called(ctx, blockchain, block)

	if len(ret) == 0 {
		panic("no return value specified for StoreBlock")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.Blockchain, *entity.Block) error); ok {
		r0 = rf(ctx, blockchain, block)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Transaction provides a mock function with given fields: ctx, cb
func (_m *StorageRepository) Transaction(ctx context.Context, cb func(context.Context) error) error {
	ret := _m.Called(ctx, cb)

	if len(ret) == 0 {
		panic("no return value specified for Transaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, func(context.Context) error) error); ok {
		r0 = rf(ctx, cb)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateBlock provides a mock function with given fields: ctx, blockchain, newBlock
func (_m *StorageRepository) UpdateBlock(ctx context.Context, blockchain entity.Blockchain, newBlock *entity.Block) error {
	ret := _m.Called(ctx, blockchain, newBlock)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBlock")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.Blockchain, *entity.Block) error); ok {
		r0 = rf(ctx, blockchain, newBlock)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateHeight provides a mock function with given fields: ctx, blockchain, height
func (_m *StorageRepository) UpdateHeight(ctx context.Context, blockchain entity.Blockchain, height entity.BlockHeight) error {
	ret := _m.Called(ctx, blockchain, height)

	if len(ret) == 0 {
		panic("no return value specified for UpdateHeight")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.Blockchain, entity.BlockHeight) error); ok {
		r0 = rf(ctx, blockchain, height)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewStorageRepository creates a new instance of StorageRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStorageRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *StorageRepository {
	mock := &StorageRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.53.0. DO NOT EDIT.

package mocks

import (
	context "context"

	entities "github.com/LiquidCats/watcher/v2/internal/app/utxo/domain/entities"
	mock "github.com/stretchr/testify/mock"
)

// TransactionPublisher is an autogenerated mock type for the TransactionPublisher type
type TransactionPublisher struct {
	mock.Mock
}

// PublishTransaction provides a mock function with given fields: ctx, transaction
func (_m *TransactionPublisher) PublishTransaction(ctx context.Context, transaction *entities.Transaction) error {
	ret := _m.Called(ctx, transaction)

	if len(ret) == 0 {
		panic("no return value specified for PublishTransaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entities.Transaction) error); ok {
		r0 = rf(ctx, transaction)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewTransactionPublisher creates a new instance of TransactionPublisher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTransactionPublisher(t interface {
	mock.TestingT
	Cleanup(func())
}) *TransactionPublisher {
	mock := &TransactionPublisher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

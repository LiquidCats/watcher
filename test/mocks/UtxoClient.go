// Code generated by mockery v2.53.0. DO NOT EDIT.

package mocks

import (
	context "context"

	entities "github.com/LiquidCats/watcher/v2/internal/app/domain/entities"
	mock "github.com/stretchr/testify/mock"
)

// UtxoClient is an autogenerated mock type for the UtxoClient type
type UtxoClient struct {
	mock.Mock
}

// GetBlockByHash provides a mock function with given fields: ctx, hash
func (_m *UtxoClient) GetBlockByHash(ctx context.Context, hash entities.BlockHash) (entities.Block, error) {
	ret := _m.Called(ctx, hash)

	if len(ret) == 0 {
		panic("no return value specified for GetBlockByHash")
	}

	var r0 entities.Block
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.BlockHash) (entities.Block, error)); ok {
		return rf(ctx, hash)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entities.BlockHash) entities.Block); ok {
		r0 = rf(ctx, hash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(entities.Block)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, entities.BlockHash) error); ok {
		r1 = rf(ctx, hash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLatestBlockHash provides a mock function with given fields: ctx
func (_m *UtxoClient) GetLatestBlockHash(ctx context.Context) (entities.BlockHash, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetLatestBlockHash")
	}

	var r0 entities.BlockHash
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (entities.BlockHash, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) entities.BlockHash); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(entities.BlockHash)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMempool provides a mock function with given fields: ctx
func (_m *UtxoClient) GetMempool(ctx context.Context) ([]entities.TxID, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetMempool")
	}

	var r0 []entities.TxID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]entities.TxID, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []entities.TxID); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.TxID)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransactionByTxId provides a mock function with given fields: ctx, hash
func (_m *UtxoClient) GetTransactionByTxId(ctx context.Context, hash entities.TxID) (entities.Transaction, error) {
	ret := _m.Called(ctx, hash)

	if len(ret) == 0 {
		panic("no return value specified for GetTransactionByTxId")
	}

	var r0 entities.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.TxID) (entities.Transaction, error)); ok {
		return rf(ctx, hash)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entities.TxID) entities.Transaction); ok {
		r0 = rf(ctx, hash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(entities.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, entities.TxID) error); ok {
		r1 = rf(ctx, hash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUtxoClient creates a new instance of UtxoClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUtxoClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *UtxoClient {
	mock := &UtxoClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
